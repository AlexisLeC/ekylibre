- prefix = namespace + "[#{f.index}]"
- f.object.reference_name = reference.name
.nested-fields.nested-product-parameter{class: "nested-#{reference.name.to_s.parameterize}", data: { intervention_parameter: reference.name } }
  = link_to_remove_nested_association(:destroy.ta, f)
  = f.input :reference_name, as: :hidden
  - if reference.output?
    = f.referenced_association :variant, label: reference.human_name, source: {scope: reference.scope_hash.merge(availables: true)}, input_html: { data: { intervention_updater: prefix + 'variant_id' }}
    -#= f.referenced_association :product, as: :hidden, input_html: { data: { intervention_updater: prefix + 'product_id' }}
  - else
    - started_at = Time.now
    - if f.object.intervention
      - if f.object.intervention.started_at
        - started_at = f.object.intervention.started_at
      - else
        - started_at = f.object.intervention.working_periods.map(&:started_at).min
    = f.referenced_association :product, label: reference.human_name, source: { scope: reference.scope_hash.merge(availables: [at: started_at.strftime("%Y-%m-%d %H:%M")]), keep: true }, input_html: { class: "scoped-parameter", data: { intervention_updater: prefix + 'product_id' } }, new: false
  - if reference.quantified?
    = render 'quantifier_field', f: f, reference: reference, prefix: prefix
  - if (attr = reference.attribute(:new_name))
    - if attr.hidden?
      = f.input :new_name, as: :hidden, input_html: { data: { intervention_updater: prefix + 'new_name' }}
    - else
      = f.input :new_name, input_html: { data: { intervention_updater: prefix + 'new_name' }}
  - if reference.attribute(:working_zone)
    = f.geometry :working_zone, input_html: { data: { intervention_updater: prefix + 'working_zone' }}
  - if reference.readings.any?
    - reference.readings.each do |reading|
      - unless f.object.readings.detect{|r| r.indicator_name.to_s == reading.name.to_s }
        - f.object.readings.new(indicator_name: reading.name)
    = f.simple_fields_for(:readings, f.object.readings) do |r|
      - ref = reference.reading(r.object.indicator_name)
      - next unless ref
      = r.reading as: (ref.accessible? ? nil : :hidden), input_html: { data: { intervention_updater: prefix + 'readings' }}
