- main_toolbar do |t|
  - t.edit resource

= beehive do |b|
  - b.hbox do
    - if resource.storage.is_a?(CultivableZone)
      - b.cell :support do
        = mini_map(resource.storage)
        .info
          %span.title= CultivableZone.human_attribute_name(:work_number)
          %span.value= resource.storage.work_number
        .info
          %span.title= CultivableZone.human_attribute_name(:net_surface_area)
          %span.value= resource.storage.net_surface_area.in_hectare.round(2).l
        .info
          %span.title= :production.tl
          %span.value= link_to(resource.production.name, backend_production_path(resource.production))
        - if resource.implanted_at
          .info
            %span.title= :implanted_at.tl
            %span.value= resource.implanted_at.l
        - if resource.harvested_at
          .info
            %span.title= :harvested_at.tl
            %span.value= resource.harvested_at.l

      - b.cell(:markers) do
        = toolbar do |t|
          - t.new(params: {controller: :production_support_markers, :support_id => resource.id})
        = list(:markers)

  - if resource.selected_manure_management_plan_zone
    - b.cell :manure_management_plan_chart do
      - if resource.selected_manure_management_plan_zone
        :ruby
          # prepare an array of hash

          data_series = []
          nitrogen_mass = []

          nitrogen_input = resource.selected_manure_management_plan_zone.nitrogen_input || 0.0
          opened_at = resource.selected_manure_management_plan_zone.opened_at

          # FIXME Some french to remove, arghh....
          data_series << { name: 'Fumure calculée (X) au ' + opened_at.strftime("%d/%m/%Y"), y: nitrogen_input.to_s.to_f, color: "#000077"}

          # get the nitrogen input I from opened_at to now (in kg N/Ha )
          balance = nitrogen_input
          for intervention in resource.interventions.real.where(state: 'done').of_nature(:soil_enrichment).between(opened_at, Time.now).reorder(:started_at)
            i = 0
            for input in intervention.casts.of_role('soil_enrichment-input')
              m = (input.actor ? input.actor.net_mass(input).to_d(:kilogram) : 0.0)
              n = (input.actor ? input.actor.nitrogen_concentration.to_d(:unity) : 0.0)
              nitrogen_mass <<  m * n
            end
            if surface_area = intervention.casts.of_role('soil_enrichment-target').first.population
              i = (nitrogen_mass.compact.sum / surface_area.to_d)
              # FIXME Some french to remove, arghh....
              data_series << { name: intervention.name + ' du ' + intervention.started_at.strftime("%d/%m/%Y"), y: -i.to_s.to_f, color: "#FFEE99"}
              balance -= i
            end
          end

          # TODO fix the russian method bellow
          data_series << { name: "Reste à apporter", isSum: true, color: (balance >= 0 ? "#35DD00" : "#DD0000")}

          series = []
          series << {up_color: cycle(*theme_colors), color: cycle(*theme_colors), data: data_series, data_labels: {enabled: false}}

        -# FIXME Some french to remove, arghh....
        = waterfall_chart(series, tooltip: {point_format: '{point.y: 1.3f} kg N/Ha'}, title: {text: 'Bilan azote'}, legend: {enabled: false}, x_axis: {type: 'category'}, y_axis: {title: {text: 'kg N/Ha'}})
      - else
        = no_data

  - if resource.interventions.count > 0 and Nomen::Varieties[resource.production.variant.variety] <= :plant
    - b.cell :production_cost do
      :ruby
        # prepare an array of hash

        unit = :hectare
        unit_item = Nomen::Units[unit]

        currency = Preference[:currency]
        currency_item = Nomen::Currencies[currency]

        series = []
        categories = [:input_cost.tl, :doer_cost.tl, :tool_cost.tl]
        global_cost_per_hectare = []

        # data for bar chart costs by activities
        resource.interventions.reorder(:started_at).find_each do |intervention|
          data = []
          for role in [:input, :doer, :tool]
            if intervention.cost(role)
              cost_per_hectare = intervention.cost(role) / (resource.storage_net_surface_area(intervention.started_at).to_d(unit))
            else
              cost_per_hectare = 0.0
            end
            data << cost_per_hectare.round(2).to_s.to_f
          end
          series << { name: intervention.name, data: data }
        end

        # data for total cost pie by intervention
        data = []
        resource.interventions.reorder(:started_at).find_each do |intervention|
          cost = []
          for role in [:input, :doer, :tool]
            if intervention.cost(role)
              cost << intervention.cost(role) / (resource.storage_net_surface_area(intervention.started_at).to_d(unit))
            end
          end
          data << {name: intervention.name, y: cost.compact.sum.round(2).to_s.to_f }
          global_cost_per_hectare << cost.compact.sum.round(2).to_s.to_f
        end
        series << {type: 'pie', name: :total.tl, data: data, center: [50, 50], size: 100, show_in_legend: false, data_labels: { enabled: false }}

        # build chart title
        label_measure = currency_item.human_name + '/' + unit_item.human_name
        symbol_measure = currency_item.symbol + '/' + unit_item.symbol
        chart_title = :production_cost.tl + ' : ' + global_cost_per_hectare.compact.sum.round(2).to_s + ' ' + label_measure +' (' + symbol_measure + ')'



      = column_chart(series, title: chart_title, tooltip: {point_format: "{point.y: 1.2f} #{symbol_measure}"}, y_axis: {title: {text: :cost_per_net_surface_area.tl + ' (' + symbol_measure + ')'}, stack_labels: {enabled: true, format: "{total} " + symbol_measure}, labels: { format: "{value}" }}, x_axis: { categories: categories}, legend: true, plot_options: { column: {stacking: 'normal'}})
  - else
    = no_data

  - b.hbox do
    - b.cell(:interventions) do
      = toolbar do |t|
        - t.new(params: {controller: :interventions, :production_support_id => resource.id})
      = list(:interventions)
    -# b.cell(:markers) do
      = toolbar do |t|
        - t.new(params: {controller: :production_support_markers, :support_id => resource.id})
      = list(:markers)
    - b.cell do
      = attributes_list do |l|
        - l.attribute :name
        - l.attribute :storage, url: true
        - l.attribute :production, url: true
        - l.attribute :started_at
        - l.attribute :stopped_at
        - l.attribute :irrigated
        - l.attribute :nature
        - l.attribute :production_usage
