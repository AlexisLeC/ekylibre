- main_toolbar do |t|
  = t.edit resource
  -# t.destroy
  -#= t.new(params: {controller: :issues, target_id: resource.id, target_type: resource.class.name}, tool: 'new-issue')
  -#= t.new(params: {controller: :inspections, product_id: resource.id}, tool: 'eyedropper')

= main_informations attachment: true do
  = render 'picture'
  = infos do
    = resource_info(:work_number, important: true)
    = resource_info(:population, important: true) do |population|
      = resource.population.round(3).to_s + " " + Nomen::Unit[resource.net_surface_area.unit].symbol
    = resource_info(:variety, important: true, nomenclature: true)
    = resource_info(:born_at, important: true)
    - if resource.born_at && resource.age >= 1.day
      = resource_info(:age) do |age|
        %i.picto{class: "picto-clock-o"}
        = human_age(resource.born_at, display: 2)
    -# stock = resource.inspections.reorder(:sampled_at).last.product_stock_in_ground
    -# if resource.inspections.any? && stock
      .med-info
        %span.title= Product.human_attribute_name(:product_stock_in_ground)
        %span.value
          %i.picto{class: "picto-grain"}
          = stock.round(3).l
      - if resource.population && resource.population.to_d != 0.0
        .med-info
          %span.title= Product.human_attribute_name(:provisionnal_yield)
          %span.value
            %i.picto{class: "picto-grain"}
            - unit = stock.unit + "_per_" + resource.net_surface_area.unit
            = (stock.to_d / resource.population).in(unit).round(3).l
    = resource_info(:status, important: true) do |status|
      = lights(status)
    -#.med-info
      %span.title= Product.human_attribute_name(:ready_to_harvest)
      %span.value
        %i.picto{class: "picto-#{resource.ready_to_harvest ? :done : :clear}"}
    = resource_info :description
    = resource_info :container do |container|
      %i.picto{class: "zone"}
      = link_to(container.work_name, {controller: container.type.tableize, action: :show, id: container.id})
    - if resource.customized?
      = attributes_list(stamps: false)

= cobbles do |c|

  - if resource.intervention_product_parameters.any?
    - c.cobble(:intervention_product_parameters, title: :x_interventions.tl(count: resource.interventions.count)) do
      = cobble_list(:intervention_product_parameters)

  - c.cobble(:issues, title: :x_issues.tl(count: resource.issues.count)) do
    = cobble_toolbar do |t|
      = t.new(params: {controller: :issues, target_id: resource.id, target_type: resource.class.name})
    = cobble_list(:issues)

  -# if resource.inspections.any?
    -:ruby
      # build categories
      categories = []
      dataset = resource.inspections.reorder(:sampled_at)
      categories << dataset.map(&:position).uniq
      series = []

      # build symbol
      symbol_measure = Nomen::Unit[dataset.last.product_stock_in_ground.unit].symbol

      pgc = InspectionPoint.where(inspection_id: dataset.pluck(:id)).of_nature(:calibre)
      agc = ActivityInspectionPointNature.where(id: pgc.pluck(:activity_grading_check_id).compact.uniq).reorder(:minimal_calibre_value)

      # for each calibre
      agc.each do |activity_calibre|
        chec = activity_calibre.inspection_checks.of_products(resource).reorder(:minimal_size_value)
        # check global net mass of inspection
        m = chec.first.inspection.net_mass.to_d
        stock_in_ground = chec.first.inspection.product_stock_in_ground.to_d
        arr = []
        # for each check
        chec.of_nature(:calibre).map do |check|
          y = (check.net_mass_value.to_d / m) * stock_in_ground  if m != 0.0
          arr << y.to_i.to_s.to_f
        end
        series << { name: activity_calibre.name, data: arr}
      end

    - if series.any?
      - c.cobble(:stock_in_ground_by_calibres) do
        = column_highcharts(series, y_axis: {title: {text: "#{symbol_measure}"}, stack_labels: {enabled: true}}, x_axis: { categories: categories}, legend: true, tooltip: {point_format: "{point.y: 1f} #{symbol_measure}"},plot_options: { column: {stacking: 'normal', data_labels: {enabled: true}}})


  - c.cobble(:inspections, title: :x_inspections.tl(count: resource.inspections.count)) do
    -# FIXME Add activity in URL to get link working
    -# = cobble_toolbar do |t|
      = t.new(params: { controller: :inspections, product_id: resource.id })
    = cobble_list(:inspections)
