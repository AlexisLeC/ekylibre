- main_toolbar do |t|
  = t.edit resource
  -# t.destroy
  -#= t.new(params: {controller: :issues, target_id: resource.id, target_type: resource.class.name}, tool: 'new-issue')
  -#= t.new(params: {controller: :inspections, product_id: resource.id}, tool: 'eyedropper')

= main_informations attachment: true do
  = render 'picture'
  = infos do
    = product_info(:work_number, important: true)
    = product_info(:net_surface_area, important: true) do |population|
      = resource.net_surface_area.round(3).l
    = product_info(:variety, important: true, nomenclature: true)
    = product_info(:born_at, important: true)
    - if resource.dead_at
      = product_info(:dead_at, important: true)
    - if resource.born_at && resource.age >= 1.day
      = product_info(:age) do |age|
        %i.picto{class: "picto-clock-o"}
        = human_age(resource.born_at, display: 2)
    -# stock = resource.inspections.reorder(:sampled_at).last.product_stock_in_ground
    -# if resource.inspections.any? && stock
      .med-info
        %span.title= Product.human_attribute_name(:product_stock_in_ground)
        %span.value
          %i.picto{class: "picto-grain"}
          = stock.round(3).l
      - if resource.population && resource.population.to_d != 0.0
        .med-info
          %span.title= Product.human_attribute_name(:provisionnal_yield)
          %span.value
            %i.picto{class: "picto-grain"}
            - unit = stock.unit + "_per_" + resource.net_surface_area.unit
            = (stock.to_d / resource.population).in(unit).round(3).l
    = product_info(:status, important: true) do |status|
      = lights(status)
    .med-info
      %span.title= :ready_to_harvest.tl
      %span.value
        %i.picto{class: "picto-#{resource.ready_to_harvest? ? :done : :clear}"}
    = product_info :description
    = product_info :container do |container|
      %i.picto{class: "zone"}
      = link_to(container.work_name, {controller: container.type.tableize, action: :show, id: container.id})
    - if resource.customized?
      = attributes_list(stamps: false)

= cobbles do |c|

  - if resource.intervention_product_parameters.any?
    - c.cobble(:intervention_product_parameters, title: :x_interventions.tl(count: resource.interventions.count)) do
      = cobble_list(:intervention_product_parameters)

  - c.cobble(:issues, title: :x_issues.tl(count: resource.issues.count)) do
    = cobble_toolbar do |t|
      = t.new(params: {controller: :issues, target_id: resource.id, target_type: resource.class.name})
    = cobble_list(:issues)

  -if resource.inspections.any?
    - inspections = resource.inspections.reorder(:sampled_at)
    - activity = inspections.first.activity
    - activity.inspection_calibration_scales.each do |scale|
      :ruby
        # build categories
        categories = []

        series = []

        curves = {}
        inspections.each do |i|
          categories << i.position.to_s
          # for each calibre
          scale.natures.reorder(:minimal_value).each do |nature|
            calibration = i.calibrations.find_by(nature: nature)
            curves[nature] ||= []
            curves[nature] << (calibration ? calibration.marketable_net_mass.round(0).to_d(Nomen::Unit[:ton]).to_s : 0).to_f
          end
        end
        curves.each do |nature, data|
          series << { name: nature.name, data: data}
        end

        # build second chart for disease

        series_disease = []

        curves_disease = {}

        inspections.each do |i|
          ActivityInspectionPointNature.unmarketable_categories.each do |nature|
            calibration = i.points_net_mass_percentage(nature)
            curves_disease[nature] ||= []
            curves_disease[nature] << (calibration ? calibration.round(2).to_s : 0).to_f
          end
        end
        curves_disease.each do |nature, data|
          series_disease << { name: nature.l, data: data}
        end

      - if series.any?
        - c.cobble(:stock_in_ground_by_calibration) do
          = column_highcharts(series, y_axis: {reversed_stacks: false, title: {text: Nomen::Indicator.find(:net_mass).human_name}, stack_labels: {enabled: true}}, x_axis: { categories: categories}, legend: true, tooltip: {point_format: "{point.y: 1f} #{activity.grading_net_mass_unit.symbol}"},plot_options: { column: {stacking: 'normal', data_labels: {enabled: true}}})
        - c.cobble(:disease_deformity_percentage) do
          = column_highcharts(series_disease, y_axis: {reversed_stacks: false, title: {text: "%"}, stack_labels: {enabled: true}}, x_axis: { categories: categories}, legend: true, tooltip: {point_format: "{point.y: 1f} %"},plot_options: { column: {stacking: 'normal', data_labels: {enabled: true}}})
        - c.cobble(:percentage_by_calibration) do
          -# set unit for this view
          - unit = Nomen::Unit[:ton]
          - last_inspection = resource.inspections.reorder(:sampled_at).last
          - last_inspection.scales.each do |scale|
            = render "backend/inspections/pie_inspection", resource: last_inspection, unit: unit, scale: scale
  - c.cobble(:inspections, title: :x_inspections.tl(count: resource.inspections.count)) do
    -# FIXME Add activity in URL to get link working
    -# = cobble_toolbar do |t|
      = t.new(params: { controller: :inspections, product_id: resource.id })
    = cobble_list(:inspections)

  = render partial: 'distributions', locals: {c: c}