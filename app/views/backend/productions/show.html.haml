:ruby
  data = resource.supports.collect do |support|
    { name:       support.name,
      shape:      support.shape,
      campaign:   support.campaign_name,
      activity:   support.activity_name,
      production: support.production_name,
      tool_cost:  support.tool_cost.to_s.to_f.round(2),
      input_cost: support.input_cost.to_s.to_f.round(2),
      time_cost:  support.time_cost.to_s.to_f.round(2),
      nitrogen_concentration:   support.soil_enrichment_indicator_content_per_area(:nitrogen_concentration).to_s.to_f.round(2),
      phosphorus_concentration: support.soil_enrichment_indicator_content_per_area(:phosphorus_concentration).to_s.to_f.round(2),
      potassium_concentration:  support.soil_enrichment_indicator_content_per_area(:potassium_concentration).to_s.to_f.round(2),
      interventions_count: support.interventions.count
    }
  end

- main_toolbar do |t|
  - t.edit resource

= beehive do |b|
  -# b.hbox do
    -# b.cell do
      = attributes_list do |l|
        - l.attribute :name
        - l.attribute :variant
        - l.attribute :started_at
        - l.attribute :state
        - l.attribute :campaign
        - l.attribute :activity

  -# TODO need to be renovate but the idea is here
  - area_value = (resource.net_surface_area.to_d(:hectare))
  - total_earn = nil
  - total_cost = nil
  - b.cell(:costs) do
    .big-infos.costs
      .big-info.cost.important
        - total_cost = 0
        - for type in [:input, :tool, :doer]
          - cost = (resource.cost(type) || 0.0).round.to_i
          - total_cost += cost
        %span.title= "total_cost".tl
        %span.value= total_cost.l(currency: Preference[:currency])
      - if resource.net_surface_area.to_d(:hectare) > 0.0
        .big-info.cost.important
          %span.title= "total_cost_per_area".tl
          %span.value
            %i.picto{class: "picto-land-parcels"}
            = (total_cost / area_value).round(2).l(currency: Preference[:currency]) + " / Ha"
  - if resource.earn > 0.0
    - b.cell(:earns) do
      .big-infos.costs
        .big-info.cost.important
          - total_earn = (resource.earn || 0.0).round.to_i
          %span.title= "total_earn".tl
          %span.value= total_earn.l(currency: Preference[:currency])
        - if resource.net_surface_area.to_d(:hectare) > 0.0
          .big-info.cost.important
            %span.title= "total_earn_per_area".tl
            %span.value
              %i.picto{class: "picto-land-parcels"}
              = (total_earn / area_value).round(2).l(currency: Preference[:currency]) + " / Ha"

  - if total_earn and total_earn > 0.0 and total_cost > 0.0
    - b.cell(:margins) do
      .big-infos.costs
        .big-info.cost.important
          - global_margin = ((total_earn - total_cost) || 0.0).round.to_i
          %span.title= "global_margin".tl
          %span.value= global_margin.l(currency: Preference[:currency])
        - if resource.net_surface_area.to_d(:hectare) > 0.0
          .big-info.cost.important
            %span.title= "global_margin_per_area".tl
            %span.value
              %i.picto{class: "picto-land-parcels"}
              = (global_margin / area_value).round(2).l(currency: Preference[:currency]) + " / Ha"


  - b.hbox do
    - if resource.variant
      - if Nomen::Varieties[resource.variant.variety] <= :equipment
        - b.cell(:supports) do
          = list(:supports)
      - elsif Nomen::Varieties[resource.variant.variety] <= :animal
        - b.cell :last_analyses, params: {campaign_id: resource.campaign_id}
        - b.cell(:supports) do
          = list(:supports)
      - elsif Nomen::Varieties[resource.variant.variety] <= :plant and resource.supports.any?
        - b.cell :map do
          - visualization do |v|
            - v.serie :main, data
            - v.background "OpenStreetMap.HOT"
            - v.background "OpenStreetMap.Mapnik"
            - v.background "Thunderforest.Landscape"
            - v.background "Esri.WorldImagery"
            - v.choropleth :tool_cost, :main, stop_color: "#00AA00"
            - v.choropleth :input_cost, :main, stop_color: "#1122DD"
            - v.choropleth :time_cost, :main, stop_color: "#E77000"
            - v.control :zoom
            - v.control :scale
            - v.control :fullscreen
            - v.control :layer_selector

      - b.cell :cropping_plan_chart do
        :ruby

          cultivable_zones = CultivableZone.of_production(resource).order(:id)

          if cultivable_zones.any?
            cultivable_zones_serie = cultivable_zones.collect do |cultivable_zone|
                      { name: cultivable_zone.name, y: cultivable_zone.net_surface_area.to_s.to_f, color: cycle(*theme_colors), url: backend_cultivable_zone_path(cultivable_zone) }
            end
          end

          series = []
          series << {name: CultivableZone.model_name.human, data: cultivable_zones_serie, size: "80%"}

        = pie_chart(series, tooltip: {point_format: '{point.y: 1.3f} Ha'}, title: {text: (resource.net_surface_area.in_hectare.round(3)).to_s}, plot_options: { pie: { allow_point_select: true, cursor: 'pointer', show_in_legend: true}}, legend: true)

      - b.cell :map do
        - visualization do |v|
          - v.serie :main, data
          - v.background "OpenStreetMap.HOT"
          - v.background "OpenStreetMap.Mapnik"
          - v.background "Thunderforest.Landscape"
          - v.background "Esri.WorldImagery"
          - v.choropleth :nitrogen_concentration, :main, stop_color: "#777777"
          - v.choropleth :phosphorus_concentration, :main, stop_color: "#11BB99"
          - v.choropleth :potassium_concentration, :main, stop_color: "#AA00AA"
          - v.control :zoom
          - v.control :scale
          - v.control :fullscreen
          - v.control :layer_selector

  - b.hbox do
    - b.cell Production.human_attribute_name(:supports) do
      = list :supports
    - b.cell(:costs) do
      .big-infos.costs
        - total = 0
        - for type in [:input, :tool, :doer]
          - cost = (resource.cost(type) || 0.0).round.to_i
          - total += cost
          .big-info.cost
            %span.title= "evaluated_#{type}_cost".tl
            %span.value
              %i.picto{class: "picto-#{type}"}
              = cost.l(currency: Preference[:currency])

  - b.hbox do
    - b.cell(:interventions) do
      = list(:interventions)

    -#b.cell(:markers) do
      = list(:markers)
